<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CPP指针</title>
    <link href="/2024/10/09/CPP%E6%8C%87%E9%92%88/"/>
    <url>/2024/10/09/CPP%E6%8C%87%E9%92%88/</url>
    
    <content type="html"><![CDATA[<p>今天就讲一下CPP里的指针  </p><h2 id="CPP指针"><a href="#CPP指针" class="headerlink" title="CPP指针"></a>CPP指针</h2><p>关于指针，这玩意是从c里面带来的，应用在程序里可以简化一些CPP编程任务的执行，还有些任务就像是动态内存分配，没有指针是没办法执行的，所以如果想要更精通CPP，学习指针是很有必要的<br><del>学习指针是一件非常有趣的事哦</del>    </p><h4 id="内存地址相关"><a href="#内存地址相关" class="headerlink" title="内存地址相关"></a>内存地址相关</h4><p>在学习CPP的时候，你应该会知道：每个变量都有一个内存位置，每个内存位置都可以用连字号（&amp;）来访问地址，它表示了在内存中的一个地址，如何使用呢？看下面  </p><blockquote><p>int a &#x3D; 12;<br>cout &lt;&lt; &a;  </p></blockquote><p>当上面这串代码执行之后他就会输出变量a的所在地址  </p><p>说了这些，你应该能知道什么是内存地址以及怎么访问他了，那接下来就正式的进入指针  </p><h4 id="什么是指针？"><a href="#什么是指针？" class="headerlink" title="什么是指针？"></a>什么是指针？</h4><p>指针就是个变量，他的值为指向另一个变量的地址，也就是内存位置的直接地址<br>指针就像别的变量和常量一样，你必须在使用指针存储别的变量地址之前对他进行声明<br>他一般是这样声明的：<br><code>type *var-name</code><br>type在这里是指针的基类型，他必须是一个有效的c++数据类型，var-name是指针变量名<br>用来声明指针的运算符 * 和乘法的那个星号是一样的，但是在这里，星号是用来指定一个变量是指针的<br>下面的这些就是有效的声明方式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int* a<span class="hljs-comment">;</span><br>double * a<span class="hljs-comment">;</span><br>char *a<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这些都是有效的声明方式<br>所有指针的值的实际数据类型，不管是整值还是别的什么数据类型，都是一样的，都是一个代表内存地址长的十六进制数<br>不同的数据类型的指针之间唯一的不同就是指针所指向的变量或者是常量的数据类型不同而已  </p><h4 id="在CPP中使用指针"><a href="#在CPP中使用指针" class="headerlink" title="在CPP中使用指针"></a>在CPP中使用指针</h4><p>使用指针的时候会频繁进行这些操作：定义一个指针变量，把变量地址赋给指针，访问指针变量中可用地址的值<br>这些都是通过一元运算符 * 来返回位于操作数指定地址的变量的值<br>接下来我就往这里丢一个示例  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;<span class="hljs-comment">//声明整型变量</span><br><span class="hljs-type">int</span>* pt = &amp;a;<span class="hljs-comment">//声明指针变量并将指向a</span><br><br>cout &lt;&lt; a &lt;&lt; endl;<span class="hljs-comment">//输出这个变量</span><br><br>cout &lt;&lt; pt &lt;&lt; endl;<span class="hljs-comment">//输出指针变量中储存的地址</span><br><br>cout &lt;&lt; *pt &lt;&lt; endl;<span class="hljs-comment">//输出指针中地址的值</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CPP指针详解"><a href="#CPP指针详解" class="headerlink" title="CPP指针详解"></a>CPP指针详解</h4><p>在c++中，有很多相关的概念，这些概念虽然很<del>简单</del>，但是都很重要<br>下面的表格内我列出了一些必须清楚的指针相关的重要概念：</p><table><thead><tr><th align="center">概念</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">C++ Null指针</td><td align="center">c++支持空指针，NULL指针是一个定义在标准库中的值为零的常量</td></tr><tr><td align="center">C++指针的算术运算</td><td align="center">可以对指针进行四种算数运算：++，–，+，-</td></tr><tr><td align="center">C++指针 vs 数组</td><td align="center">指针和数组之间有密切的关系</td></tr><tr><td align="center">C++指针数组</td><td align="center">可以定义用来储存指针的数组</td></tr><tr><td align="center">C++指向指针的指针</td><td align="center">c++允许指向指针的指针</td></tr><tr><td align="center">C++传递指针给函数</td><td align="center">通过引用或地址传递参数，使传递的参数在调用函数中被改变</td></tr><tr><td align="center">C++从函数返回指针</td><td align="center">C++允许函数返回指针到局部变量，静态变量和动态内存分配</td></tr></tbody></table><h5 id="C-Null指针"><a href="#C-Null指针" class="headerlink" title="C++ Null指针"></a>C++ Null指针</h5><p>在变量声明的时候，如果没有明确的地址可以赋值，为指针变量赋值一个NULL值是一个良好的编程习惯，这样的指针被称为空指针  </p><p>NULL指针是一个定义在标准库中值为零的常量<br>就像这样声明<br><code>int *pt = NULL;</code><br>这样声明的指针他输出的结果就是无也就是0  </p><p>在大多数的操作系统上，程序不允许访问地址为0的地址，因为这个内存是操作系统保留的<br>但是内存地址0有特别重要的意义，它表明该指针不指向一个可访问的内存位置<br>但按照惯例，如果指针包含空值（零值），就假定它不指向任何东西  </p><p>如果所有未使用的指针都被赋予空值，同时避免使用空指针，就可以防止误用一个未初始化的指针  </p><h5 id="C-指针的算术运算"><a href="#C-指针的算术运算" class="headerlink" title="C++指针的算术运算"></a>C++指针的算术运算</h5><p>指针是一个用数值表示的地址<br>因此，可以对指针进行四种算术运算：++，–，+，-  </p><p>假设ptr是一个指向地址1000的整型指针，是一个32位的整数，试试对他进行下面的算术运算：<br><code>ptr++</code><br>在执行完上面的运算之后，ptr将指向位置1004，因为ptr每增加一次，他都将指向下一个整数的位置，也就是当前位置往后移4个字节<br>这个运算会在不影响内存位置中实际值的情况下，移动指针到下一个内存位置<br>如果ptr指向一个地址为1000的字符，上面的运算会导致指针指向1001，因为下一个字符的位置是1001  </p><h6 id="递增一个指针"><a href="#递增一个指针" class="headerlink" title="递增一个指针"></a>递增一个指针</h6><p>我们喜欢在程序中使用指针代替数组，因为变量指针可以递增，但数组不行，因为数组是一个常量指针<br>下面我用了一个小程序来顺序访问数组中的每一个内容： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">3</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a[MAX] = &#123; <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span> &#125;;<br><span class="hljs-type">int</span>* pt = a;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX; i++)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;a[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;] =&quot;</span> &lt;&lt; pt &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;他的值为：&quot;</span> &lt;&lt; *pt &lt;&lt; endl;<br><br>pt++;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码执行之后它会产生以下结果：  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[0]</span> =<span class="hljs-number">00000094277</span>EF5E8<br>他的值为：<span class="hljs-number">10</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[1]</span> =<span class="hljs-number">00000094277</span>EF5EC<br>他的值为：<span class="hljs-number">20</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[2]</span> =<span class="hljs-number">00000094277</span>EF5F0<br>他的值为：<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>与之类似，递减也是一样的方法  </p><h5 id="C-指针vs数组"><a href="#C-指针vs数组" class="headerlink" title="C++ 指针vs数组"></a>C++ 指针vs数组</h5><p>指针和数组是密切相关的<br>事实上，指针和数组在很多情况下是可以互换的<br>例如，一个指针指向数组开头的指针，就可以通过使用指针的算术运算或数组索引来访问数组<br>我就不放示例就是上面的那个“递增一个指针”  </p><p>如果把指针运算符 * 应用到a上是完全可以接受的，但修改a的值是非法的<br>这是因为a是一个指向数组开头的常量，不能作为左值  </p><p>由于一个数组名对应一个指针常量，只要不改变数组的值，仍然可以用指针形式的表达式<br>例如，下面是一个有效的语句，把a[2]赋值为500<br><code>*(a+2) = 500;</code></p><h5 id="C-指向指针的指针（多级间接寻址）"><a href="#C-指向指针的指针（多级间接寻址）" class="headerlink" title="C++ 指向指针的指针（多级间接寻址）"></a>C++ 指向指针的指针（多级间接寻址）</h5><p>指向指针的指针是一种多级间接寻址的形式，或者说是一个指针链<br>通常，一个指针包含一个变量的地址<br>当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针包含实际值的位置  </p><p>一个指向指针的指针变量必须如下声明（就是在变量名前面加两个星号）<br><code>int **a;</code><br>当一个目标值被一个间接指向另一个指针时，访问这个值需要使用两个星号运算符，就像下面这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a;<br><span class="hljs-type">int</span>* pt;<br><span class="hljs-type">int</span>** ppt;<br><br>a = <span class="hljs-number">10</span>;<br><br>pt = &amp;a;<span class="hljs-comment">//获取变量a的地址</span><br><br>ppt = &amp;pt;<span class="hljs-comment">//获取pt的地址</span><br><br>cout &lt;&lt; **ppt;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就成功的使用了多级间接寻址  </p><h5 id="C-传递指针给函数"><a href="#C-传递指针给函数" class="headerlink" title="C++ 传递指针给函数"></a>C++ 传递指针给函数</h5><p>c++允许传递指针给函数，只需要简单的声明函数参数为指针类型就好了<br>下面的示例中我就使用了传递指针给函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">abb</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>* a)</span></span><br><span class="hljs-function"></span>&#123;<br>*a = <span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>);<span class="hljs-comment">//获取当前秒数</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> ba;<br><br><span class="hljs-built_in">abb</span>(&amp;ba);<br>cout &lt;&lt; ba;<span class="hljs-comment">//输出实例值</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，他会产生下列的结果</p><blockquote><p>1728481935  </p></blockquote><p><strong>既然它能接受指针作为参数，那它可不可以接受数组呢？</strong><br>答案是可以的，请看下面示例  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">5</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">abb</span><span class="hljs-params">(<span class="hljs-type">int</span>* a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MAX; i++)<br>&#123;<br>cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a[MAX] = &#123; <span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">23</span>,<span class="hljs-number">56</span>,<span class="hljs-number">59</span> &#125;;<br><span class="hljs-built_in">abb</span>(a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样编译出来的结果就是：</p><blockquote><p>15 12 23 56 59  </p></blockquote><p>终于到了最后一个东西了  </p><h5 id="new运算符"><a href="#new运算符" class="headerlink" title="new运算符"></a>new运算符</h5><p>new，是c++提供的用于动态申请储存空间的运算符  </p><h6 id="new的使用"><a href="#new的使用" class="headerlink" title="new的使用"></a>new的使用</h6><p>这里就直接上实例吧  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">int</span> *<span class="hljs-keyword">pt</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>这样就使用new声明出了一个变量<br><strong>那么可不可以用new声明数组呢？</strong><br>可以啊，怎么不可以，和上面类似，来，上实例  </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">int</span>*p=<span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><p>接下来就要说一个很重要的点，使用delete对他进行释放</p><h6 id="delete运算符的使用。"><a href="#delete运算符的使用。" class="headerlink" title="delete运算符的使用。"></a>delete运算符的使用。</h6><p>new运算符通常搭配detlete元素来使用，new用来动态申请存储空间，delete用于释放new申请的空间。<br>语法格式如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">delete p<span class="hljs-comment">;</span><br>delete[] arr<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>如果你使用完new然后你不使用delete给他释放会发生什么呢？<br>很简单的，他直接就nm的内存溢出（完啦，都完啦）<br>所以说<strong>用完new之后一定要使用delete给他进行释放</strong></p><hr><p>tips：我嘞个豆，写了我将近三百行，下次写循环和判断语句<br>记录时间：2024.10.9 22.29</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CPP的运算符</title>
    <link href="/2024/10/08/CPP%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/10/08/CPP%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p><del>我就不信今天还不能水一期了</del>  </p><h2 id="CPP运算符"><a href="#CPP运算符" class="headerlink" title="CPP运算符"></a>CPP运算符</h2><p>首先就是最简单的几种</p><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法运算符 将a和b相加</td><td align="center">a+b</td></tr><tr><td align="center">-</td><td align="center">减法运算符 将a和b相减</td><td align="center">a-b</td></tr><tr><td align="center">*</td><td align="center">乘法运算符 将a和b相乘</td><td align="center">a*b</td></tr><tr><td align="center">&#x2F;</td><td align="center">除法运算符 将a和b相除</td><td align="center">a&#x2F;b</td></tr><tr><td align="center">%</td><td align="center">取模运算符（取余数）取a除b的余数</td><td align="center">a%b</td></tr><tr><td align="center">++</td><td align="center">自增运算符 将a加1（常用于循环）</td><td align="center">a++</td></tr><tr><td align="center">–</td><td align="center">自减运算符 将a减1（也是常用于循环）</td><td align="center">a–</td></tr></tbody></table><p>这些就是最基本的运算符：算数运算符<br>怕待会忘记了就在这里说一下赋值运算符：&#x3D;<br>赋值运算符用于给变量（对象）赋值  </p><p>接下来要将另外一类  </p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>设变量a为10，变量b为20  </p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;</td><td align="center">检查两个操作数的值是否相等，如果相等则为真</td><td align="center">(a&#x3D;&#x3D;b)不为真</td></tr><tr><td align="center">!&#x3D;</td><td align="center">检查两个数是否相等，如果不相等就为真</td><td align="center">(a!&#x3D;b)为真</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">检查a是否大于等于b，如果是就为真</td><td align="center">(a&gt;&#x3D;b)不为真</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">检查a是否小于等于b，如果是就为真</td><td align="center">(a&lt;&#x3D;b)为真</td></tr><tr><td align="center">&gt;</td><td align="center">检查a是否大于b，如果是就为真</td><td align="center">(a&gt;b)不为真</td></tr><tr><td align="center">&lt;</td><td align="center">检查a是否小于b，如果是就为真</td><td align="center">(a&lt;b)为真</td></tr></tbody></table><p>说到这里，有一点要注意 <strong>&#x3D;和&#x3D;&#x3D;不能混用</strong>一个是赋值运算符，一个是等于运算符，（a&#x3D;b）这样写出来程序会给出报错  </p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>这里设a为1，b为2<br>这里就说最常用的三个    </p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与，若两个关系式都为0(真)，则条件为真</td><td align="center">(a&lt;0&amp;&amp;b&gt;0)为假</td></tr><tr><td align="center">||</td><td align="center">逻辑或，若两个关系式有一个为0(真)，则条件为真</td><td align="center">(a&lt;0||b&gt;0)为真</td></tr><tr><td align="center">!</td><td align="center">逻辑否，这个将两个关系式的结果逆转，原本为真的加上这个会变为否</td><td align="center">!(a&lt;0&amp;&amp;b&gt;0)为真</td></tr></tbody></table><blockquote><p>说起来这里要注意一点，&amp;&amp;和||有短路机制，也就是：<br>&amp;&amp;：如果表达式1为否，那他就会短路，不会继续判断第二个表达式<br>||：这个也一样，如果表达式1为真，他就会短路，不会继续判断第二个  </p></blockquote><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>假设变量a为60，变量b为13<br>用二进制表示为：00111100，0001101</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">按位与，如果同时存在与两个操作数中，二进制AND运算符复制一位到结果中</td><td align="center">(a&amp;b)将得到12，也就是00001100</td></tr><tr><td align="center">|</td><td align="center">按位或，如果存在于任意操作中，二进制OR运算符复制一位到结果中。</td><td align="center">（a\b）将得到61，即为0011 1101</td></tr><tr><td align="center">^</td><td align="center">如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制或运算符复制一位到结果中</td><td align="center">(a^b)将得到49，也就是00110001</td></tr><tr><td align="center">~</td><td align="center">二进制补码运算符是一元运算符，具有”翻转”位的作用</td><td align="center">(~a)将得到-61,也就是11000011，二的补码格式，带符号的二进制数</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">二进制左移运算符，左操作数的值向左移动右操作数指定的位数</td><td align="center">a&lt;&lt;2得到240，也就是11110000</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">二进制右移运算符，左操作数的值向右移动右操作数指定的位数</td><td align="center">a&gt;&gt;2得到15，也就是00001111</td></tr></tbody></table><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>这个就比较简单了  </p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">最简单的一个，他就叫赋值运算符，将右边的操作数赋给左操作数</td><td align="center">a&#x3D;10</td></tr><tr><td align="center">+&#x3D;</td><td align="center">加赋值运算符，将右操作数加上左操作数并赋值给左操作数</td><td align="center">a+&#x3D;10</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减赋值运算符，将右操作数减去左操作数并赋值给左操作数</td><td align="center">a-&#x3D;10</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘赋值运算符，将右操作数乘以左操作数并赋值给左操作数</td><td align="center">a*&#x3D;10</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取模赋值运算符，取两边操作数的模并赋值给左操作数</td><td align="center">a%&#x3D;10</td></tr><tr><td align="center">&lt;&lt;&#x3D;</td><td align="center">左移赋值运算符</td><td align="center">a&lt;&lt;&#x3D;2等同于a&#x3D;a&lt;&lt;2</td></tr><tr><td align="center">&gt;&gt;&#x3D;</td><td align="center">右移赋值运算符</td><td align="center">a&gt;&gt;&#x3D;2等同于a&#x3D;a&gt;&gt;2</td></tr><tr><td align="center">&amp;&#x3D;</td><td align="center">换位与赋值运算符</td><td align="center">a&amp;&#x3D;2等同于a&#x3D;a&amp;2</td></tr><tr><td align="center">^&#x3D;</td><td align="center">换位异赋值运算符</td><td align="center">a^&#x3D;2等同于a&#x3D;a^2</td></tr><tr><td align="center">|</td><td align="center">换位或赋值运算符</td><td align="center">a|&#x3D;2等同于a&#x3D;a|2</td></tr></tbody></table><h4 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h4><p>这个就是些杂项的了  </p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">sizeof</td><td align="center">sizeof运算符将取变量的大小</td><td align="center">sizeof(a)将返回4，其中a为整数</td></tr><tr><td align="center">,</td><td align="center">逗号运算符会顺序执行一系列的运算，整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值</td><td align="center">这个我想不出怎么表达，自己试试吧</td></tr><tr><td align="center">.和-&gt;</td><td align="center">成员运算符，这俩主要用于类引用类，结构体和共用体的成员</td><td align="center">这个你也自己试试口巴</td></tr><tr><td align="center">Cast</td><td align="center">强制转换运算符(这个Cast只是他的名字)，强制将当前类型的值转换为另外一种类型</td><td align="center">int（2.26）</td></tr><tr><td align="center">&amp;</td><td align="center">指针运算符&amp;，这玩意将返回选中变量实际的地址</td><td align="center">&amp;a 返回a的实际地址</td></tr><tr><td align="center">*</td><td align="center">指针运算符*</td><td align="center">*a，将指向a</td></tr></tbody></table><p>说到这里，应该说一下 <strong>运算符优先级</strong>的但是吧。。。你直接拿括号括起来解决一切问题：&gt;  </p><h4 id="一目-二目-三目运算符"><a href="#一目-二目-三目运算符" class="headerlink" title="一目 二目 三目运算符"></a>一目 二目 三目运算符</h4><p>这个很好理解<br>一目运算符就是只需要一个操作数就可以的运算符，例如：自增运算符，自减运算符<br>二目运算符就是需要两个操作数才可以的运算符，例如：赋值运算符，加法运算符<br>三目运算符就是需要三个操作数才可以的运算符，例如： ? :</p><h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><p><strong>什么是运算符的重载？</strong><br>就是运算符与类的结合，产生出新的定义<br><strong>为什么要使用运算符的重载？</strong><br>为了实现类的多态性  </p><hr><p>艾玛这次水了一百多行，<del>真好啊</del>，明天见咯~<br>拜拜~~<br>记录时间：2024.10.8 22.14</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CPP变量</title>
    <link href="/2024/10/07/CPP%E5%8F%98%E9%87%8F/"/>
    <url>/2024/10/07/CPP%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>关于cpp的变量，和其他的都一样，下面就简单的<del>水一下帖子</del>讲解一下  </p><h2 id="1-CPP变量"><a href="#1-CPP变量" class="headerlink" title="1. CPP变量"></a>1. CPP变量</h2><p>变量的概念简单来说就是一个具有名称，可以供程序员操作的一个储存空间<br>cpp是静态型编译语言，所以在定义变量的时候必须明确指明变量的数据类型  </p><h4 id="1-1-变量的定义"><a href="#1-1-变量的定义" class="headerlink" title="1.1 变量的定义"></a>1.1 变量的定义</h4><p>变量定义的基本格式很简单，就像下面的示例一样<br><code>int a = 60；</code><br>也就是：  </p><blockquote><p>变量类型 变量名 &#x3D; 值；  </p></blockquote><p>如果要声明多个变量，就将给他变为：</p><blockquote><p> 变量类型 变量名1 &#x3D; 值,变量名2 &#x3D; 值；  </p></blockquote><p>用逗号隔开就ok了</p><p>说起来要注意一个事：<br><strong>在cpp里有对象和变量两种说法，很多人分不清他俩的区别，对象是指的是一块能存放数据并且具有某种类型的储存空间。单单从定义上来说，他俩其实都是同一个东西只是有人习惯把与类有关的称为对象，怎么称呼完全取决于自己，就像方法和函数的区分</strong></p><h4 id="1-2-初始值"><a href="#1-2-初始值" class="headerlink" title="1.2 初始值"></a>1.2 初始值</h4><p>当一个变量在声明的时候就给他赋值，这被称为这个变量被初始化了</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> a = <span class="hljs-number">60</span><br><span class="hljs-comment">//这个值被初始化了</span><br></code></pre></td></tr></table></figure><p>这里初始化和赋值是两个概念：<br>初始化是在变量（对象）创建的时候就给他赋值，给他一个初始值<br>赋值是把变量（对象）当前的值擦除，用新的值代替<br>虽然他俩是两个不同的概念，但是其实不太会影响编写程序  </p><p>初始化有很多种方法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int a <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>int a <span class="hljs-operator">=</span>&#123;<span class="hljs-number">10</span>&#125;<span class="hljs-comment">;</span><br>int a&#123;<span class="hljs-number">10</span>&#125;<span class="hljs-comment">;</span><br>int a(<span class="hljs-number">10</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这个怎么用就看你的习惯了  </p><p>而创建的时候就给他初始化，和先声明，之后再给他赋值，我更建议先给他初始化<br>如果你对没有进行初始化的变量进行输出他的值的时候你会发现<br><strong>“哎？我靠，他输出了个啥”</strong><br><strong>“哎？他怎么又双叒叕报错了？？？”</strong>  </p><p>这是为什么呢？很简单，这是由于cpp中有一个默认初始化机制，在任何的函数体内，变量如果不进行人为的初始化，变量就不会初始化，但是定义在任何函数体之外的变量都会被初始化为零  </p><blockquote><p><strong>注意</strong><br>虽然cpp有默认初始化机制，但还是建议对变量进行初始化，这样才能保证程序的安全，也能养成良好的编程习惯  </p></blockquote><h4 id="1-3-标识符"><a href="#1-3-标识符" class="headerlink" title="1.3 标识符"></a>1.3 标识符</h4><p>cpp的标识符只能由字母，数字，下划线构成，但是数字不能拿来开头，只能用字母和下划线开头，例如：<br><code>int 1a = 10</code><br>这样写他会报错<br>关于标识符，我们在定义的时候，应该遵从相应的规则，这样才能使代码显得更加规整</p><blockquote><p>定义标识符的规则<br>1， 尽量使用英语单词或者缩写，要见名知意思<br>2，变量一般用小写开头，类名用大写字母开头<br>3，对于组合的单词，中间用下划线隔开  </p></blockquote><h4 id="1-4-名字的作用域"><a href="#1-4-名字的作用域" class="headerlink" title="1.4 名字的作用域"></a>1.4 名字的作用域</h4><p>作用域指的是变量或者对象，函数等具有功能性的一个范围，通常是以{}为界限。关于作用域这个概念，并没有什么难点，只需知道，只有在与之对应的作用域里，变量（对象），函数等实体才具有功能。</p><p>接下来，我举个栗子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a=<span class="hljs-number">40</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">10</span>；<span class="hljs-comment">//这里的i只能在这里使用，超出了就不能使用了</span><br>        cout &lt;&lt; i;<br>    &#125;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">20</span>;<span class="hljs-comment">//这里能重新定义，因为上面的那个已经失效了</span><br>    cout &lt;&lt; i;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<span class="hljs-comment">//报错，因为上面的int a是全局的，没有失效；</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了这些，for循环和while循环也一样  </p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><p><del>我嘞个豆啊，想着水一篇的，怎么写了这么多</del><br>记录时间：2024.10.7 21.45</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++基本程序HelloWord</title>
    <link href="/2024/10/07/C-%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8FHelloWord/"/>
    <url>/2024/10/07/C-%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8FHelloWord/</url>
    
    <content type="html"><![CDATA[<h3 id="C-的基础程序-HelloWord"><a href="#C-的基础程序-HelloWord" class="headerlink" title="C++的基础程序 HelloWord"></a>C++的基础程序 HelloWord</h3><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><pre><code class="hljs">#include &lt; iostream &gt;  using namespace std;  int main()  &#123;    cout &lt;&lt; &quot;Hello Word!!!&quot;;  &#125;</code></pre><p>程序输出：</p><blockquote><p>Hello Word!!!</p></blockquote><ul><li><p><strong>#include &lt; iostream &gt;</strong><br>这是一个调用iostream库的代码，调用过来才能使用里面的东西<br><code>#include</code><br>调用库的意思，后面像上面的一样用&lt;&gt;括起来<br><code> &lt;iostream&gt;</code><br>代表的调用的是iostream库  </p></li><li><p><strong>using namespace std;</strong><br>这的意思是将命名空间std引用到程序里<br><code>using</code><br>这就是引用后面的命名空间的代码<br><code>namespace</code><br>这是为当前这个域都定义名字，像这里写的就是为当前域命名为std  </p></li><li><p><strong>int main()</strong><br>创建main主函数里面的花括号用来证明里面的代码是main函数的  </p></li><li><p><strong>cout &lt;&lt; “Hello Word!!!”;</strong><br>cout用来打印文字一类的，将Hello Word!!!打印到屏幕上。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>念の博客</title>
    <link href="/2024/10/07/%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/10/07/%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h2><p>  如果想要了解一下我可以去我做的个人简介里看看<br>  <a href="https://2773423981.github.io/ACGN/index">念の个人简介</a>  </p><h4 id="我为什么要做这个博客？"><a href="#我为什么要做这个博客？" class="headerlink" title="我为什么要做这个博客？"></a>我为什么要做这个博客？</h4><p>这个的原因挺简单的，我想通过博客的方式记录每天的学习内容</p><p>也没啥能说的，就看我后面更新的文章吧<br><del>时不时的还会发会颠</del><br>咳咳咳</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
