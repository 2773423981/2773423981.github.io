<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CPP的运算符</title>
    <link href="/2024/10/08/CPP%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/10/08/CPP%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p><del>我就不信今天还不能水一期了</del>  </p><h2 id="CPP运算符"><a href="#CPP运算符" class="headerlink" title="CPP运算符"></a>CPP运算符</h2><p>首先就是最简单的几种</p><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加法运算符 将a和b相加</td><td align="center">a+b</td></tr><tr><td align="center">-</td><td align="center">减法运算符 将a和b相减</td><td align="center">a-b</td></tr><tr><td align="center">*</td><td align="center">乘法运算符 将a和b相乘</td><td align="center">a*b</td></tr><tr><td align="center">&#x2F;</td><td align="center">除法运算符 将a和b相除</td><td align="center">a&#x2F;b</td></tr><tr><td align="center">%</td><td align="center">取模运算符（取余数）取a除b的余数</td><td align="center">a%b</td></tr><tr><td align="center">++</td><td align="center">自增运算符 将a加1（常用于循环）</td><td align="center">a++</td></tr><tr><td align="center">–</td><td align="center">自减运算符 将a减1（也是常用于循环）</td><td align="center">a–</td></tr></tbody></table><p>这些就是最基本的运算符：算数运算符<br>怕待会忘记了就在这里说一下赋值运算符：&#x3D;<br>赋值运算符用于给变量（对象）赋值  </p><p>接下来要将另外一类  </p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>设变量a为10，变量b为20  </p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;</td><td align="center">检查两个操作数的值是否相等，如果相等则为真</td><td align="center">(a&#x3D;&#x3D;b)不为真</td></tr><tr><td align="center">!&#x3D;</td><td align="center">检查两个数是否相等，如果不相等就为真</td><td align="center">(a!&#x3D;b)为真</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">检查a是否大于等于b，如果是就为真</td><td align="center">(a&gt;&#x3D;b)不为真</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">检查a是否小于等于b，如果是就为真</td><td align="center">(a&lt;&#x3D;b)为真</td></tr><tr><td align="center">&gt;</td><td align="center">检查a是否大于b，如果是就为真</td><td align="center">(a&gt;b)不为真</td></tr><tr><td align="center">&lt;</td><td align="center">检查a是否小于b，如果是就为真</td><td align="center">(a&lt;b)为真</td></tr></tbody></table><p>说到这里，有一点要注意 <strong>&#x3D;和&#x3D;&#x3D;不能混用</strong>一个是赋值运算符，一个是等于运算符，（a&#x3D;b）这样写出来程序会给出报错  </p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>这里设a为1，b为2<br>这里就说最常用的三个    </p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与，若两个关系式都为0(真)，则条件为真</td><td align="center">(a&lt;0&amp;&amp;b&gt;0)为假</td></tr><tr><td align="center">||</td><td align="center">逻辑或，若两个关系式有一个为0(真)，则条件为真</td><td align="center">(a&lt;0||b&gt;0)为真</td></tr><tr><td align="center">!</td><td align="center">逻辑否，这个将两个关系式的结果逆转，原本为真的加上这个会变为否</td><td align="center">!(a&lt;0&amp;&amp;b&gt;0)为真</td></tr></tbody></table><blockquote><p>说起来这里要注意一点，&amp;&amp;和||有短路机制，也就是：<br>&amp;&amp;：如果表达式1为否，那他就会短路，不会继续判断第二个表达式<br>||：这个也一样，如果表达式1为真，他就会短路，不会继续判断第二个  </p></blockquote><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>假设变量a为60，变量b为13<br>用二进制表示为：00111100，0001101</p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">按位与，如果同时存在与两个操作数中，二进制AND运算符复制一位到结果中</td><td align="center">(a&amp;b)将得到12，也就是00001100</td></tr><tr><td align="center">|</td><td align="center">按位或，如果存在于任意操作中，二进制OR运算符复制一位到结果中。</td><td align="center">（a\b）将得到61，即为0011 1101</td></tr><tr><td align="center">^</td><td align="center">如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制或运算符复制一位到结果中</td><td align="center">(a^b)将得到49，也就是00110001</td></tr><tr><td align="center">~</td><td align="center">二进制补码运算符是一元运算符，具有”翻转”位的作用</td><td align="center">(~a)将得到-61,也就是11000011，二的补码格式，带符号的二进制数</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">二进制左移运算符，左操作数的值向左移动右操作数指定的位数</td><td align="center">a&lt;&lt;2得到240，也就是11110000</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">二进制右移运算符，左操作数的值向右移动右操作数指定的位数</td><td align="center">a&gt;&gt;2得到15，也就是00001111</td></tr></tbody></table><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>这个就比较简单了  </p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">最简单的一个，他就叫赋值运算符，将右边的操作数赋给左操作数</td><td align="center">a&#x3D;10</td></tr><tr><td align="center">+&#x3D;</td><td align="center">加赋值运算符，将右操作数加上左操作数并赋值给左操作数</td><td align="center">a+&#x3D;10</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减赋值运算符，将右操作数减去左操作数并赋值给左操作数</td><td align="center">a-&#x3D;10</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘赋值运算符，将右操作数乘以左操作数并赋值给左操作数</td><td align="center">a*&#x3D;10</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取模赋值运算符，取两边操作数的模并赋值给左操作数</td><td align="center">a%&#x3D;10</td></tr><tr><td align="center">&lt;&lt;&#x3D;</td><td align="center">左移赋值运算符</td><td align="center">a&lt;&lt;&#x3D;2等同于a&#x3D;a&lt;&lt;2</td></tr><tr><td align="center">&gt;&gt;&#x3D;</td><td align="center">右移赋值运算符</td><td align="center">a&gt;&gt;&#x3D;2等同于a&#x3D;a&gt;&gt;2</td></tr><tr><td align="center">&amp;&#x3D;</td><td align="center">换位与赋值运算符</td><td align="center">a&amp;&#x3D;2等同于a&#x3D;a&amp;2</td></tr><tr><td align="center">^&#x3D;</td><td align="center">换位异赋值运算符</td><td align="center">a^&#x3D;2等同于a&#x3D;a^2</td></tr><tr><td align="center">|</td><td align="center">换位或赋值运算符</td><td align="center">a|&#x3D;2等同于a&#x3D;a|2</td></tr></tbody></table><h4 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h4><p>这个就是些杂项的了  </p><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">sizeof</td><td align="center">sizeof运算符将取变量的大小</td><td align="center">sizeof(a)将返回4，其中a为整数</td></tr><tr><td align="center">,</td><td align="center">逗号运算符会顺序执行一系列的运算，整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值</td><td align="center">这个我想不出怎么表达，自己试试吧</td></tr><tr><td align="center">.和-&gt;</td><td align="center">成员运算符，这俩主要用于类引用类，结构体和共用体的成员</td><td align="center">这个你也自己试试口巴</td></tr><tr><td align="center">Cast</td><td align="center">强制转换运算符(这个Cast只是他的名字)，强制将当前类型的值转换为另外一种类型</td><td align="center">int（2.26）</td></tr><tr><td align="center">&amp;</td><td align="center">指针运算符&amp;，这玩意将返回选中变量实际的地址</td><td align="center">&amp;a 返回a的实际地址</td></tr><tr><td align="center">*</td><td align="center">指针运算符*</td><td align="center">*a，将指向a</td></tr></tbody></table><p>说到这里，应该说一下 <strong>运算符优先级</strong>的但是吧。。。你直接拿括号括起来解决一切问题：&gt;  </p><h4 id="一目-二目-三目运算符"><a href="#一目-二目-三目运算符" class="headerlink" title="一目 二目 三目运算符"></a>一目 二目 三目运算符</h4><p>这个很好理解<br>一目运算符就是只需要一个操作数就可以的运算符，例如：自增运算符，自减运算符<br>二目运算符就是需要两个操作数才可以的运算符，例如：赋值运算符，加法运算符<br>三目运算符就是需要三个操作数才可以的运算符，例如： ? :</p><h4 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h4><p><strong>什么是运算符的重载？</strong><br>就是运算符与类的结合，产生出新的定义<br><strong>为什么要使用运算符的重载？</strong><br>为了实现类的多态性  </p><hr><p>艾玛这次水了一百多行，<del>真好啊</del>，明天见咯~<br>拜拜~~<br>记录时间：2024.10.8 22.14</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CPP变量</title>
    <link href="/2024/10/07/CPP%E5%8F%98%E9%87%8F/"/>
    <url>/2024/10/07/CPP%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>关于cpp的变量，和其他的都一样，下面就简单的<del>水一下帖子</del>讲解一下  </p><h2 id="1-CPP变量"><a href="#1-CPP变量" class="headerlink" title="1. CPP变量"></a>1. CPP变量</h2><p>变量的概念简单来说就是一个具有名称，可以供程序员操作的一个储存空间<br>cpp是静态型编译语言，所以在定义变量的时候必须明确指明变量的数据类型  </p><h4 id="1-1-变量的定义"><a href="#1-1-变量的定义" class="headerlink" title="1.1 变量的定义"></a>1.1 变量的定义</h4><p>变量定义的基本格式很简单，就像下面的示例一样<br><code>int a = 60；</code><br>也就是：  </p><blockquote><p>变量类型 变量名 &#x3D; 值；  </p></blockquote><p>如果要声明多个变量，就将给他变为：</p><blockquote><p> 变量类型 变量名1 &#x3D; 值,变量名2 &#x3D; 值；  </p></blockquote><p>用逗号隔开就ok了</p><p>说起来要注意一个事：<br><strong>在cpp里有对象和变量两种说法，很多人分不清他俩的区别，对象是指的是一块能存放数据并且具有某种类型的储存空间。单单从定义上来说，他俩其实都是同一个东西只是有人习惯把与类有关的称为对象，怎么称呼完全取决于自己，就像方法和函数的区分</strong></p><h4 id="1-2-初始值"><a href="#1-2-初始值" class="headerlink" title="1.2 初始值"></a>1.2 初始值</h4><p>当一个变量在声明的时候就给他赋值，这被称为这个变量被初始化了</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> a = <span class="hljs-number">60</span><br><span class="hljs-comment">//这个值被初始化了</span><br></code></pre></td></tr></table></figure><p>这里初始化和赋值是两个概念：<br>初始化是在变量（对象）创建的时候就给他赋值，给他一个初始值<br>赋值是把变量（对象）当前的值擦除，用新的值代替<br>虽然他俩是两个不同的概念，但是其实不太会影响编写程序  </p><p>初始化有很多种方法：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">int a <span class="hljs-operator">=</span> <span class="hljs-number">10</span><span class="hljs-comment">;</span><br>int a <span class="hljs-operator">=</span>&#123;<span class="hljs-number">10</span>&#125;<span class="hljs-comment">;</span><br>int a&#123;<span class="hljs-number">10</span>&#125;<span class="hljs-comment">;</span><br>int a(<span class="hljs-number">10</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这个怎么用就看你的习惯了  </p><p>而创建的时候就给他初始化，和先声明，之后再给他赋值，我更建议先给他初始化<br>如果你对没有进行初始化的变量进行输出他的值的时候你会发现<br><strong>“哎？我靠，他输出了个啥”</strong><br><strong>“哎？他怎么又双叒叕报错了？？？”</strong>  </p><p>这是为什么呢？很简单，这是由于cpp中有一个默认初始化机制，在任何的函数体内，变量如果不进行人为的初始化，变量就不会初始化，但是定义在任何函数体之外的变量都会被初始化为零  </p><blockquote><p><strong>注意</strong><br>虽然cpp有默认初始化机制，但还是建议对变量进行初始化，这样才能保证程序的安全，也能养成良好的编程习惯  </p></blockquote><h4 id="1-3-标识符"><a href="#1-3-标识符" class="headerlink" title="1.3 标识符"></a>1.3 标识符</h4><p>cpp的标识符只能由字母，数字，下划线构成，但是数字不能拿来开头，只能用字母和下划线开头，例如：<br><code>int 1a = 10</code><br>这样写他会报错<br>关于标识符，我们在定义的时候，应该遵从相应的规则，这样才能使代码显得更加规整</p><blockquote><p>定义标识符的规则<br>1， 尽量使用英语单词或者缩写，要见名知意思<br>2，变量一般用小写开头，类名用大写字母开头<br>3，对于组合的单词，中间用下划线隔开  </p></blockquote><h4 id="1-4-名字的作用域"><a href="#1-4-名字的作用域" class="headerlink" title="1.4 名字的作用域"></a>1.4 名字的作用域</h4><p>作用域指的是变量或者对象，函数等具有功能性的一个范围，通常是以{}为界限。关于作用域这个概念，并没有什么难点，只需知道，只有在与之对应的作用域里，变量（对象），函数等实体才具有功能。</p><p>接下来，我举个栗子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a=<span class="hljs-number">40</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    &#123;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">10</span>；<span class="hljs-comment">//这里的i只能在这里使用，超出了就不能使用了</span><br>        cout &lt;&lt; i;<br>    &#125;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">20</span>;<span class="hljs-comment">//这里能重新定义，因为上面的那个已经失效了</span><br>    cout &lt;&lt; i;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<span class="hljs-comment">//报错，因为上面的int a是全局的，没有失效；</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>除了这些，for循环和while循环也一样  </p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><p><del>我嘞个豆啊，想着水一篇的，怎么写了这么多</del><br>记录时间：2024.10.7 21.45</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++基本程序HelloWord</title>
    <link href="/2024/10/07/C-%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8FHelloWord/"/>
    <url>/2024/10/07/C-%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8FHelloWord/</url>
    
    <content type="html"><![CDATA[<h3 id="C-的基础程序-HelloWord"><a href="#C-的基础程序-HelloWord" class="headerlink" title="C++的基础程序 HelloWord"></a>C++的基础程序 HelloWord</h3><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><pre><code class="hljs">#include &lt; iostream &gt;  using namespace std;  int main()  &#123;    cout &lt;&lt; &quot;Hello Word!!!&quot;;  &#125;</code></pre><p>程序输出：</p><blockquote><p>Hello Word!!!</p></blockquote><ul><li><p><strong>#include &lt; iostream &gt;</strong><br>这是一个调用iostream库的代码，调用过来才能使用里面的东西<br><code>#include</code><br>调用库的意思，后面像上面的一样用&lt;&gt;括起来<br><code> &lt;iostream&gt;</code><br>代表的调用的是iostream库  </p></li><li><p><strong>using namespace std;</strong><br>这的意思是将命名空间std引用到程序里<br><code>using</code><br>这就是引用后面的命名空间的代码<br><code>namespace</code><br>这是为当前这个域都定义名字，像这里写的就是为当前域命名为std  </p></li><li><p><strong>int main()</strong><br>创建main主函数里面的花括号用来证明里面的代码是main函数的  </p></li><li><p><strong>cout &lt;&lt; “Hello Word!!!”;</strong><br>cout用来打印文字一类的，将Hello Word!!!打印到屏幕上。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>念の博客</title>
    <link href="/2024/10/07/%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/10/07/%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h2><p>  如果想要了解一下我可以去我做的个人简介里看看<br>  <a href="https://2773423981.github.io/ACGN/index">念の个人简介</a>  </p><h4 id="我为什么要做这个博客？"><a href="#我为什么要做这个博客？" class="headerlink" title="我为什么要做这个博客？"></a>我为什么要做这个博客？</h4><p>这个的原因挺简单的，我想通过博客的方式记录每天的学习内容</p><p>也没啥能说的，就看我后面更新的文章吧<br><del>时不时的还会发会颠</del><br>咳咳咳</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
